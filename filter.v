// -------------------------------------------------------------
//
// Module: filter
// Generated by MATLAB(R) 8.5 and the Filter Design HDL Coder 2.9.7.
// Generated on: 2020-09-08 22:28:12
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// CoeffPrefix: co
// FIRAdderStyle: tree
// OptimizeForHDL: on
// ClockEnableInputPort: clk_en
// TargetDirectory: C:\Users\Muhammad Saad\Desktop
// AddPipelineRegisters: on
// InputPort: xin
// OutputPort: xout
// TargetLanguage: Verilog
// TestBenchStimulus: impulse step ramp chirp noise 

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Multipliers           : 36
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 36
// Stable            : Yes
// Linear Phase      : Yes (Type 2)
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module filter
               (
                clk,
                clk_en,
                reset,
                xin,
                xout
                );

  input   clk; 
  input   clk_en; 
  input   reset; 
  input   [63:0] xin; //double
  output  [63:0] xout; //double

////////////////////////////////////////////////////////////////
//Module Architecture: filter
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter co1 = -8.3821356560628644E-03; //double
  parameter co2 = 8.3980165508688604E-03; //double
  parameter co3 = -7.4556435995053461E-03; //double
  parameter co4 = 3.8670602113327194E-03; //double
  parameter co5 = 3.9158737853802576E-03; //double
  parameter co6 = -1.5966601002780651E-02; //double
  parameter co7 = 3.0038581754453942E-02; //double
  parameter co8 = -4.1713081822408606E-02; //double
  parameter co9 = 4.5643968076000456E-02; //double
  parameter co10 = -3.7530477421187536E-02; //double
  parameter co11 = 1.6094558476214188E-02; //double
  parameter co12 = 1.5745190101079814E-02; //double
  parameter co13 = -5.1076536656779942E-02; //double
  parameter co14 = 8.0668760216741964E-02; //double
  parameter co15 = -9.5666226680524685E-02; //double
  parameter co16 = 9.0434658289361217E-02; //double
  parameter co17 = -6.4581318515117531E-02; //double
  parameter co18 = 2.3410273078913399E-02; //double
  parameter co19 = 2.3410273078913399E-02; //double
  parameter co20 = -6.4581318515117531E-02; //double
  parameter co21 = 9.0434658289361217E-02; //double
  parameter co22 = -9.5666226680524685E-02; //double
  parameter co23 = 8.0668760216741964E-02; //double
  parameter co24 = -5.1076536656779942E-02; //double
  parameter co25 = 1.5745190101079814E-02; //double
  parameter co26 = 1.6094558476214188E-02; //double
  parameter co27 = -3.7530477421187536E-02; //double
  parameter co28 = 4.5643968076000456E-02; //double
  parameter co29 = -4.1713081822408606E-02; //double
  parameter co30 = 3.0038581754453942E-02; //double
  parameter co31 = -1.5966601002780651E-02; //double
  parameter co32 = 3.9158737853802576E-03; //double
  parameter co33 = 3.8670602113327194E-03; //double
  parameter co34 = -7.4556435995053461E-03; //double
  parameter co35 = 8.3980165508688604E-03; //double
  parameter co36 = -8.3821356560628644E-03; //double

  // Signals
  real delay_pipeline [0:35] ; // double
  real product36; // double
  real product35; // double
  real product34; // double
  real product33; // double
  real product32; // double
  real product31; // double
  real product30; // double
  real product29; // double
  real product28; // double
  real product27; // double
  real product26; // double
  real product25; // double
  real product24; // double
  real product23; // double
  real product22; // double
  real product21; // double
  real product20; // double
  real product19; // double
  real product18; // double
  real product17; // double
  real product16; // double
  real product15; // double
  real product14; // double
  real product13; // double
  real product12; // double
  real product11; // double
  real product10; // double
  real product9; // double
  real product8; // double
  real product7; // double
  real product6; // double
  real product5; // double
  real product4; // double
  real product3; // double
  real product2; // double
  real product1; // double
  real sum_final; // double
  real sum1_1; // double
  real sumpipe1_1; // double
  real sum1_2; // double
  real sumpipe1_2; // double
  real sum1_3; // double
  real sumpipe1_3; // double
  real sum1_4; // double
  real sumpipe1_4; // double
  real sum1_5; // double
  real sumpipe1_5; // double
  real sum1_6; // double
  real sumpipe1_6; // double
  real sum1_7; // double
  real sumpipe1_7; // double
  real sum1_8; // double
  real sumpipe1_8; // double
  real sum1_9; // double
  real sumpipe1_9; // double
  real sum1_10; // double
  real sumpipe1_10; // double
  real sum1_11; // double
  real sumpipe1_11; // double
  real sum1_12; // double
  real sumpipe1_12; // double
  real sum1_13; // double
  real sumpipe1_13; // double
  real sum1_14; // double
  real sumpipe1_14; // double
  real sum1_15; // double
  real sumpipe1_15; // double
  real sum1_16; // double
  real sumpipe1_16; // double
  real sum1_17; // double
  real sumpipe1_17; // double
  real sum1_18; // double
  real sumpipe1_18; // double
  real sum2_1; // double
  real sumpipe2_1; // double
  real sum2_2; // double
  real sumpipe2_2; // double
  real sum2_3; // double
  real sumpipe2_3; // double
  real sum2_4; // double
  real sumpipe2_4; // double
  real sum2_5; // double
  real sumpipe2_5; // double
  real sum2_6; // double
  real sumpipe2_6; // double
  real sum2_7; // double
  real sumpipe2_7; // double
  real sum2_8; // double
  real sumpipe2_8; // double
  real sum2_9; // double
  real sumpipe2_9; // double
  real sum3_1; // double
  real sumpipe3_1; // double
  real sum3_2; // double
  real sumpipe3_2; // double
  real sum3_3; // double
  real sumpipe3_3; // double
  real sum3_4; // double
  real sumpipe3_4; // double
  real sumpipe3_5; // double
  real sum4_1; // double
  real sumpipe4_1; // double
  real sum4_2; // double
  real sumpipe4_2; // double
  real sumpipe4_3; // double
  real sum5_1; // double
  real sumpipe5_1; // double
  real sumpipe5_2; // double
  real sum6_1; // double
  real sumpipe6_1; // double
  real output_typeconvert; // double
  real output_register; // double

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0.0000000000000000E+00;
        delay_pipeline[1] <= 0.0000000000000000E+00;
        delay_pipeline[2] <= 0.0000000000000000E+00;
        delay_pipeline[3] <= 0.0000000000000000E+00;
        delay_pipeline[4] <= 0.0000000000000000E+00;
        delay_pipeline[5] <= 0.0000000000000000E+00;
        delay_pipeline[6] <= 0.0000000000000000E+00;
        delay_pipeline[7] <= 0.0000000000000000E+00;
        delay_pipeline[8] <= 0.0000000000000000E+00;
        delay_pipeline[9] <= 0.0000000000000000E+00;
        delay_pipeline[10] <= 0.0000000000000000E+00;
        delay_pipeline[11] <= 0.0000000000000000E+00;
        delay_pipeline[12] <= 0.0000000000000000E+00;
        delay_pipeline[13] <= 0.0000000000000000E+00;
        delay_pipeline[14] <= 0.0000000000000000E+00;
        delay_pipeline[15] <= 0.0000000000000000E+00;
        delay_pipeline[16] <= 0.0000000000000000E+00;
        delay_pipeline[17] <= 0.0000000000000000E+00;
        delay_pipeline[18] <= 0.0000000000000000E+00;
        delay_pipeline[19] <= 0.0000000000000000E+00;
        delay_pipeline[20] <= 0.0000000000000000E+00;
        delay_pipeline[21] <= 0.0000000000000000E+00;
        delay_pipeline[22] <= 0.0000000000000000E+00;
        delay_pipeline[23] <= 0.0000000000000000E+00;
        delay_pipeline[24] <= 0.0000000000000000E+00;
        delay_pipeline[25] <= 0.0000000000000000E+00;
        delay_pipeline[26] <= 0.0000000000000000E+00;
        delay_pipeline[27] <= 0.0000000000000000E+00;
        delay_pipeline[28] <= 0.0000000000000000E+00;
        delay_pipeline[29] <= 0.0000000000000000E+00;
        delay_pipeline[30] <= 0.0000000000000000E+00;
        delay_pipeline[31] <= 0.0000000000000000E+00;
        delay_pipeline[32] <= 0.0000000000000000E+00;
        delay_pipeline[33] <= 0.0000000000000000E+00;
        delay_pipeline[34] <= 0.0000000000000000E+00;
        delay_pipeline[35] <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_en == 1'b1) begin
          delay_pipeline[0] <= $bitstoreal(xin);
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
        end
      end
    end // Delay_Pipeline_process


  always @* product36 <= delay_pipeline[35] * co36;

  always @* product35 <= delay_pipeline[34] * co35;

  always @* product34 <= delay_pipeline[33] * co34;

  always @* product33 <= delay_pipeline[32] * co33;

  always @* product32 <= delay_pipeline[31] * co32;

  always @* product31 <= delay_pipeline[30] * co31;

  always @* product30 <= delay_pipeline[29] * co30;

  always @* product29 <= delay_pipeline[28] * co29;

  always @* product28 <= delay_pipeline[27] * co28;

  always @* product27 <= delay_pipeline[26] * co27;

  always @* product26 <= delay_pipeline[25] * co26;

  always @* product25 <= delay_pipeline[24] * co25;

  always @* product24 <= delay_pipeline[23] * co24;

  always @* product23 <= delay_pipeline[22] * co23;

  always @* product22 <= delay_pipeline[21] * co22;

  always @* product21 <= delay_pipeline[20] * co21;

  always @* product20 <= delay_pipeline[19] * co20;

  always @* product19 <= delay_pipeline[18] * co19;

  always @* product18 <= delay_pipeline[17] * co18;

  always @* product17 <= delay_pipeline[16] * co17;

  always @* product16 <= delay_pipeline[15] * co16;

  always @* product15 <= delay_pipeline[14] * co15;

  always @* product14 <= delay_pipeline[13] * co14;

  always @* product13 <= delay_pipeline[12] * co13;

  always @* product12 <= delay_pipeline[11] * co12;

  always @* product11 <= delay_pipeline[10] * co11;

  always @* product10 <= delay_pipeline[9] * co10;

  always @* product9 <= delay_pipeline[8] * co9;

  always @* product8 <= delay_pipeline[7] * co8;

  always @* product7 <= delay_pipeline[6] * co7;

  always @* product6 <= delay_pipeline[5] * co6;

  always @* product5 <= delay_pipeline[4] * co5;

  always @* product4 <= delay_pipeline[3] * co4;

  always @* product3 <= delay_pipeline[2] * co3;

  always @* product2 <= delay_pipeline[1] * co2;

  always @* product1 <= delay_pipeline[0] * co1;

  always @* sum1_1 <= product36 + product35;

  always @* sum1_2 <= product34 + product33;

  always @* sum1_3 <= product32 + product31;

  always @* sum1_4 <= product30 + product29;

  always @* sum1_5 <= product28 + product27;

  always @* sum1_6 <= product26 + product25;

  always @* sum1_7 <= product24 + product23;

  always @* sum1_8 <= product22 + product21;

  always @* sum1_9 <= product20 + product19;

  always @* sum1_10 <= product18 + product17;

  always @* sum1_11 <= product16 + product15;

  always @* sum1_12 <= product14 + product13;

  always @* sum1_13 <= product12 + product11;

  always @* sum1_14 <= product10 + product9;

  always @* sum1_15 <= product8 + product7;

  always @* sum1_16 <= product6 + product5;

  always @* sum1_17 <= product4 + product3;

  always @* sum1_18 <= product2 + product1;

  always @ (posedge clk or posedge reset)
    begin: temp_process1
      if (reset == 1'b1) begin
        sumpipe1_1 <= 0.0000000000000000E+00;
        sumpipe1_2 <= 0.0000000000000000E+00;
        sumpipe1_3 <= 0.0000000000000000E+00;
        sumpipe1_4 <= 0.0000000000000000E+00;
        sumpipe1_5 <= 0.0000000000000000E+00;
        sumpipe1_6 <= 0.0000000000000000E+00;
        sumpipe1_7 <= 0.0000000000000000E+00;
        sumpipe1_8 <= 0.0000000000000000E+00;
        sumpipe1_9 <= 0.0000000000000000E+00;
        sumpipe1_10 <= 0.0000000000000000E+00;
        sumpipe1_11 <= 0.0000000000000000E+00;
        sumpipe1_12 <= 0.0000000000000000E+00;
        sumpipe1_13 <= 0.0000000000000000E+00;
        sumpipe1_14 <= 0.0000000000000000E+00;
        sumpipe1_15 <= 0.0000000000000000E+00;
        sumpipe1_16 <= 0.0000000000000000E+00;
        sumpipe1_17 <= 0.0000000000000000E+00;
        sumpipe1_18 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_en == 1'b1) begin
          sumpipe1_1 <= sum1_1;
          sumpipe1_2 <= sum1_2;
          sumpipe1_3 <= sum1_3;
          sumpipe1_4 <= sum1_4;
          sumpipe1_5 <= sum1_5;
          sumpipe1_6 <= sum1_6;
          sumpipe1_7 <= sum1_7;
          sumpipe1_8 <= sum1_8;
          sumpipe1_9 <= sum1_9;
          sumpipe1_10 <= sum1_10;
          sumpipe1_11 <= sum1_11;
          sumpipe1_12 <= sum1_12;
          sumpipe1_13 <= sum1_13;
          sumpipe1_14 <= sum1_14;
          sumpipe1_15 <= sum1_15;
          sumpipe1_16 <= sum1_16;
          sumpipe1_17 <= sum1_17;
          sumpipe1_18 <= sum1_18;
        end
      end
    end // temp_process1

  always @* sum2_1 <= sumpipe1_1 + sumpipe1_2;

  always @* sum2_2 <= sumpipe1_3 + sumpipe1_4;

  always @* sum2_3 <= sumpipe1_5 + sumpipe1_6;

  always @* sum2_4 <= sumpipe1_7 + sumpipe1_8;

  always @* sum2_5 <= sumpipe1_9 + sumpipe1_10;

  always @* sum2_6 <= sumpipe1_11 + sumpipe1_12;

  always @* sum2_7 <= sumpipe1_13 + sumpipe1_14;

  always @* sum2_8 <= sumpipe1_15 + sumpipe1_16;

  always @* sum2_9 <= sumpipe1_17 + sumpipe1_18;

  always @ (posedge clk or posedge reset)
    begin: temp_process2
      if (reset == 1'b1) begin
        sumpipe2_1 <= 0.0000000000000000E+00;
        sumpipe2_2 <= 0.0000000000000000E+00;
        sumpipe2_3 <= 0.0000000000000000E+00;
        sumpipe2_4 <= 0.0000000000000000E+00;
        sumpipe2_5 <= 0.0000000000000000E+00;
        sumpipe2_6 <= 0.0000000000000000E+00;
        sumpipe2_7 <= 0.0000000000000000E+00;
        sumpipe2_8 <= 0.0000000000000000E+00;
        sumpipe2_9 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_en == 1'b1) begin
          sumpipe2_1 <= sum2_1;
          sumpipe2_2 <= sum2_2;
          sumpipe2_3 <= sum2_3;
          sumpipe2_4 <= sum2_4;
          sumpipe2_5 <= sum2_5;
          sumpipe2_6 <= sum2_6;
          sumpipe2_7 <= sum2_7;
          sumpipe2_8 <= sum2_8;
          sumpipe2_9 <= sum2_9;
        end
      end
    end // temp_process2

  always @* sum3_1 <= sumpipe2_1 + sumpipe2_2;

  always @* sum3_2 <= sumpipe2_3 + sumpipe2_4;

  always @* sum3_3 <= sumpipe2_5 + sumpipe2_6;

  always @* sum3_4 <= sumpipe2_7 + sumpipe2_8;

  always @ (posedge clk or posedge reset)
    begin: temp_process3
      if (reset == 1'b1) begin
        sumpipe3_1 <= 0.0000000000000000E+00;
        sumpipe3_2 <= 0.0000000000000000E+00;
        sumpipe3_3 <= 0.0000000000000000E+00;
        sumpipe3_4 <= 0.0000000000000000E+00;
        sumpipe3_5 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_en == 1'b1) begin
          sumpipe3_1 <= sum3_1;
          sumpipe3_2 <= sum3_2;
          sumpipe3_3 <= sum3_3;
          sumpipe3_4 <= sum3_4;
          sumpipe3_5 <= sumpipe2_9;
        end
      end
    end // temp_process3

  always @* sum4_1 <= sumpipe3_1 + sumpipe3_2;

  always @* sum4_2 <= sumpipe3_3 + sumpipe3_4;

  always @ (posedge clk or posedge reset)
    begin: temp_process4
      if (reset == 1'b1) begin
        sumpipe4_1 <= 0.0000000000000000E+00;
        sumpipe4_2 <= 0.0000000000000000E+00;
        sumpipe4_3 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_en == 1'b1) begin
          sumpipe4_1 <= sum4_1;
          sumpipe4_2 <= sum4_2;
          sumpipe4_3 <= sumpipe3_5;
        end
      end
    end // temp_process4

  always @* sum5_1 <= sumpipe4_1 + sumpipe4_2;

  always @ (posedge clk or posedge reset)
    begin: temp_process5
      if (reset == 1'b1) begin
        sumpipe5_1 <= 0.0000000000000000E+00;
        sumpipe5_2 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_en == 1'b1) begin
          sumpipe5_1 <= sum5_1;
          sumpipe5_2 <= sumpipe4_3;
        end
      end
    end // temp_process5

  always @* sum6_1 <= sumpipe5_1 + sumpipe5_2;

  always @ (posedge clk or posedge reset)
    begin: temp_process6
      if (reset == 1'b1) begin
        sumpipe6_1 <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_en == 1'b1) begin
          sumpipe6_1 <= sum6_1;
        end
      end
    end // temp_process6

  always @* sum_final <= sumpipe6_1;


  always @* output_typeconvert <= sum_final;


  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_en == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign xout = $realtobits(output_register);
endmodule  // filter
